// tird.cpp : Defines the entry point for the console application.
//

#include "svm.h"
#include "stdafx.h"
#include <iostream.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
#include <ctype.h>




char c_seq[8000][100];
// c_seq define the number of sequence fragment of 'C' in cental position of input protein sequence.
char seq_fasta[100][10000];
// seq_fasta define the max number of input protein sequences.
double code_Test[8000][120];
// code_Test define the code the c_seq.
int seq_long,size_Test;
int site_position[3000];
int seat_lines[100]={-1};


#define Malloc(type,n) (type *)malloc((n)*sizeof(type))
void rand_perm(int *p,int N,int k);
int main_predict(int argc, char **argv);
int main_train(int argc, char **argv);

int long_fasta[10000];

int add_window(int seq_long,int lines_fasta,int long_fasta[]);




int find(char s1);


int get_data_fasta(char* Test_fasta);

// fuction get_data_fasta define reading the input fasta document.



void aPWM_code(double PWMpos[21][60], double PWMneg[21][60], char Seq[],int N,int M,double PWMcode[]);

// define the PWMs of positive and negative.

double PWMpos[21][60]=
{

0.05814	,	0.063953	,	0.055233	,	0.072674	,	0.069767	,	0.069767	,	0.049419	,	0.069767	,	0.06686	,	0.072674	,	0.078488	,	0.084302	,	0.093023	,	0.084302	,	0.09593	,	0.075581	,	0.06686	,	0.05814	,	0.098837	,	0.081395	,	0.069767	,	0.046512	,	0.069767	,	0.090116	,	0.06686	,	0.043605	,	0.069767	,	0.040698	,	0.046512	,	0.063953	,	0.034884	,	0.055233	,	0.049419	,	0.052326	,	0.046512	,	0.055233	,	0.06686	,	0.05814	,	0.055233	,	0.037791	,	0.05814	,	0.040698	,	0.063953	,	0.087209	,	0.072674	,	0.069767	,	0.061047	,	0.061047	,	0.087209	,	0.05814	,	0.061047	,	0.055233	,	0.046512	,	0.052326	,	0.046512	,	0.063953	,	0.049419	,	0.078488	,	0.061047	,	0.049419	,
0.011628	,	0.040698	,	0.017442	,	0.023256	,	0.02907	,	0.040698	,	0.043605	,	0.043605	,	0.026163	,	0.040698	,	0.049419	,	0.02907	,	0.031977	,	0.020349	,	0.02907	,	0.023256	,	0.031977	,	0.046512	,	0.02907	,	0.052326	,	0.037791	,	0.06686	,	0.063953	,	0.061047	,	0.081395	,	0.055233	,	0.040698	,	0.037791	,	0.055233	,	0.049419	,	0.061047	,	0.087209	,	0.10174	,	0.09593	,	0.063953	,	0.063953	,	0.055233	,	0.075581	,	0.075581	,	0.069767	,	0.043605	,	0.046512	,	0.043605	,	0.040698	,	0.043605	,	0.040698	,	0.052326	,	0.046512	,	0.031977	,	0.026163	,	0.040698	,	0.049419	,	0.037791	,	0.037791	,	0.046512	,	0.037791	,	0.061047	,	0.040698	,	0.049419	,	0.037791	,
0.034884	,	0.043605	,	0.05814	,	0.06686	,	0.055233	,	0.055233	,	0.05814	,	0.031977	,	0.043605	,	0.043605	,	0.040698	,	0.026163	,	0.023256	,	0.020349	,	0.02907	,	0.026163	,	0.02907	,	0.02907	,	0.037791	,	0.014535	,	0.020349	,	0.020349	,	0.037791	,	0.02907	,	0.023256	,	0.014535	,	0.011628	,	0.023256	,	0.026163	,	0.020349	,	0.023256	,	0.031977	,	0.046512	,	0.049419	,	0.055233	,	0.043605	,	0.023256	,	0.046512	,	0.049419	,	0.040698	,	0.034884	,	0.049419	,	0.02907	,	0.020349	,	0.026163	,	0.037791	,	0.02907	,	0.049419	,	0.037791	,	0.034884	,	0.020349	,	0.037791	,	0.026163	,	0.040698	,	0.034884	,	0.061047	,	0.034884	,	0.034884	,	0.040698	,	0.02907	,
0.031977	,	0.034884	,	0.031977	,	0.043605	,	0.046512	,	0.023256	,	0.034884	,	0.02907	,	0.026163	,	0.020349	,	0.026163	,	0.026163	,	0.031977	,	0.011628	,	0.017442	,	0.02907	,	0.020349	,	0.023256	,	0.0087209	,	0.020349	,	0.031977	,	0.023256	,	0.014535	,	0.014535	,	0.017442	,	0.017442	,	0.014535	,	0.023256	,	0.017442	,	0.011628	,	0.020349	,	0.034884	,	0.023256	,	0.017442	,	0.020349	,	0.034884	,	0.034884	,	0.046512	,	0.049419	,	0.031977	,	0.046512	,	0.031977	,	0.040698	,	0.037791	,	0.049419	,	0.026163	,	0.02907	,	0.040698	,	0.040698	,	0.034884	,	0.031977	,	0.046512	,	0.02907	,	0.031977	,	0.040698	,	0.063953	,	0.023256	,	0.037791	,	0.031977	,	0.040698	,
0.034884	,	0.011628	,	0.005814	,	0.023256	,	0.017442	,	0.023256	,	0.014535	,	0.026163	,	0.020349	,	0.017442	,	0.020349	,	0.0087209	,	0.014535	,	0.023256	,	0.023256	,	0.026163	,	0.014535	,	0.023256	,	0.017442	,	0.031977	,	0.052326	,	0.043605	,	0.043605	,	0.063953	,	0.084302	,	0.090116	,	0.125	,	0.14826	,	0.11337	,	0.20058	,	0.2064	,	0.11919	,	0.14826	,	0.10465	,	0.090116	,	0.069767	,	0.052326	,	0.031977	,	0.037791	,	0.046512	,	0.040698	,	0.020349	,	0.020349	,	0.014535	,	0.02907	,	0.014535	,	0.02907	,	0.020349	,	0.014535	,	0.014535	,	0.014535	,	0.002907	,	0.014535	,	0.011628	,	0.014535	,	0.0087209	,	0.020349	,	0.026163	,	0.023256	,	0.023256	,
0.040698	,	0.02907	,	0.02907	,	0.023256	,	0.026163	,	0.040698	,	0.020349	,	0.014535	,	0.023256	,	0.011628	,	0.014535	,	0.023256	,	0.017442	,	0.02907	,	0.014535	,	0.020349	,	0.023256	,	0.020349	,	0.031977	,	0.014535	,	0.031977	,	0.026163	,	0.023256	,	0.020349	,	0.049419	,	0.017442	,	0.026163	,	0.040698	,	0.014535	,	0.011628	,	0.034884	,	0.031977	,	0.040698	,	0.037791	,	0.02907	,	0.031977	,	0.052326	,	0.02907	,	0.02907	,	0.02907	,	0.026163	,	0.043605	,	0.037791	,	0.02907	,	0.014535	,	0.020349	,	0.020349	,	0.034884	,	0.040698	,	0.02907	,	0.031977	,	0.037791	,	0.020349	,	0.040698	,	0.026163	,	0.02907	,	0.02907	,	0.040698	,	0.034884	,	0.031977	,
0.069767	,	0.049419	,	0.043605	,	0.043605	,	0.043605	,	0.043605	,	0.046512	,	0.020349	,	0.043605	,	0.031977	,	0.026163	,	0.020349	,	0.034884	,	0.049419	,	0.02907	,	0.026163	,	0.026163	,	0.034884	,	0.037791	,	0.026163	,	0.026163	,	0.052326	,	0.037791	,	0.014535	,	0.02907	,	0.052326	,	0.0087209	,	0.031977	,	0.026163	,	0.020349	,	0.014535	,	0.0087209	,	0.017442	,	0.026163	,	0.055233	,	0.063953	,	0.061047	,	0.081395	,	0.055233	,	0.052326	,	0.05814	,	0.049419	,	0.043605	,	0.069767	,	0.046512	,	0.049419	,	0.043605	,	0.069767	,	0.055233	,	0.063953	,	0.043605	,	0.061047	,	0.055233	,	0.061047	,	0.06686	,	0.040698	,	0.043605	,	0.063953	,	0.072674	,	0.069767	,
0.069767	,	0.06686	,	0.05814	,	0.075581	,	0.052326	,	0.040698	,	0.040698	,	0.046512	,	0.055233	,	0.043605	,	0.052326	,	0.043605	,	0.049419	,	0.069767	,	0.075581	,	0.046512	,	0.063953	,	0.084302	,	0.055233	,	0.055233	,	0.069767	,	0.052326	,	0.09593	,	0.069767	,	0.052326	,	0.072674	,	0.090116	,	0.061047	,	0.078488	,	0.075581	,	0.075581	,	0.06686	,	0.061047	,	0.034884	,	0.02907	,	0.037791	,	0.069767	,	0.043605	,	0.037791	,	0.05814	,	0.052326	,	0.05814	,	0.055233	,	0.049419	,	0.049419	,	0.072674	,	0.055233	,	0.034884	,	0.043605	,	0.061047	,	0.061047	,	0.05814	,	0.040698	,	0.05814	,	0.031977	,	0.043605	,	0.046512	,	0.049419	,	0.040698	,	0.026163	,
0.0087209	,	0.002907	,	0.0087209	,	0.0087209	,	0.0087209	,	0.0087209	,	0.026163	,	0.014535	,	0.0087209	,	0.0087209	,	0.017442	,	0.020349	,	0.020349	,	0.020349	,	0.011628	,	0.011628	,	0.017442	,	0.011628	,	0.0087209	,	0.011628	,	0	,	0.011628	,	0.0087209	,	0.011628	,	0.002907	,	0.002907	,	0.002907	,	0.011628	,	0.020349	,	0.011628	,	0.020349	,	0.020349	,	0.005814	,	0.017442	,	0.02907	,	0.0087209	,	0.011628	,	0.0087209	,	0.017442	,	0.020349	,	0.026163	,	0.020349	,	0.0087209	,	0.011628	,	0.0087209	,	0.005814	,	0.014535	,	0.020349	,	0.023256	,	0.020349	,	0.023256	,	0.011628	,	0.031977	,	0.023256	,	0.02907	,	0.026163	,	0.040698	,	0.020349	,	0.02907	,	0.017442	,
0.049419	,	0.026163	,	0.049419	,	0.046512	,	0.037791	,	0.063953	,	0.06686	,	0.087209	,	0.06686	,	0.081395	,	0.069767	,	0.06686	,	0.081395	,	0.09593	,	0.075581	,	0.06686	,	0.063953	,	0.05814	,	0.06686	,	0.063953	,	0.055233	,	0.043605	,	0.040698	,	0.040698	,	0.049419	,	0.049419	,	0.055233	,	0.063953	,	0.046512	,	0.02907	,	0.06686	,	0.037791	,	0.043605	,	0.037791	,	0.034884	,	0.031977	,	0.043605	,	0.031977	,	0.034884	,	0.040698	,	0.040698	,	0.063953	,	0.026163	,	0.034884	,	0.031977	,	0.061047	,	0.052326	,	0.02907	,	0.046512	,	0.043605	,	0.049419	,	0.046512	,	0.046512	,	0.034884	,	0.031977	,	0.034884	,	0.023256	,	0.034884	,	0.037791	,	0.043605	,
0.10465	,	0.11919	,	0.10174	,	0.087209	,	0.087209	,	0.090116	,	0.13081	,	0.11337	,	0.13372	,	0.11047	,	0.11628	,	0.15407	,	0.12209	,	0.12791	,	0.12209	,	0.14535	,	0.12791	,	0.11337	,	0.13663	,	0.13372	,	0.12791	,	0.14244	,	0.11628	,	0.17442	,	0.13081	,	0.13663	,	0.11337	,	0.1657	,	0.1686	,	0.12791	,	0.15407	,	0.10465	,	0.078488	,	0.10756	,	0.11337	,	0.093023	,	0.090116	,	0.069767	,	0.093023	,	0.078488	,	0.06686	,	0.075581	,	0.043605	,	0.069767	,	0.078488	,	0.063953	,	0.075581	,	0.090116	,	0.087209	,	0.069767	,	0.072674	,	0.072674	,	0.075581	,	0.06686	,	0.063953	,	0.081395	,	0.063953	,	0.034884	,	0.02907	,	0.081395	,
0.049419	,	0.040698	,	0.023256	,	0.040698	,	0.040698	,	0.02907	,	0.023256	,	0.040698	,	0.037791	,	0.043605	,	0.040698	,	0.020349	,	0.026163	,	0.017442	,	0.02907	,	0.037791	,	0.06686	,	0.061047	,	0.072674	,	0.055233	,	0.043605	,	0.06686	,	0.05814	,	0.046512	,	0.02907	,	0.046512	,	0.069767	,	0.020349	,	0.046512	,	0.031977	,	0.043605	,	0.093023	,	0.075581	,	0.078488	,	0.10174	,	0.093023	,	0.087209	,	0.093023	,	0.081395	,	0.081395	,	0.078488	,	0.063953	,	0.052326	,	0.069767	,	0.05814	,	0.072674	,	0.05814	,	0.031977	,	0.05814	,	0.05814	,	0.055233	,	0.049419	,	0.055233	,	0.055233	,	0.055233	,	0.052326	,	0.063953	,	0.055233	,	0.037791	,	0.055233	,
0.014535	,	0.026163	,	0.02907	,	0.011628	,	0.023256	,	0.014535	,	0.017442	,	0.020349	,	0.011628	,	0.031977	,	0.020349	,	0.023256	,	0.031977	,	0.034884	,	0.02907	,	0.017442	,	0.034884	,	0.017442	,	0.031977	,	0.023256	,	0.037791	,	0.031977	,	0.049419	,	0.023256	,	0.023256	,	0.02907	,	0.034884	,	0.037791	,	0.037791	,	0.017442	,	0.020349	,	0.002907	,	0.0087209	,	0.017442	,	0.002907	,	0.011628	,	0.0087209	,	0.005814	,	0.020349	,	0.02907	,	0.020349	,	0.026163	,	0.014535	,	0.014535	,	0.031977	,	0.011628	,	0.020349	,	0.0087209	,	0.005814	,	0.020349	,	0.017442	,	0.014535	,	0.011628	,	0.020349	,	0.0087209	,	0.011628	,	0.020349	,	0.014535	,	0.017442	,	0.014535	,
0.02907	,	0.052326	,	0.05814	,	0.026163	,	0.034884	,	0.02907	,	0.031977	,	0.031977	,	0.040698	,	0.046512	,	0.034884	,	0.055233	,	0.037791	,	0.031977	,	0.052326	,	0.040698	,	0.052326	,	0.034884	,	0.055233	,	0.040698	,	0.063953	,	0.078488	,	0.046512	,	0.055233	,	0.06686	,	0.06686	,	0.052326	,	0.06686	,	0.061047	,	0.040698	,	0.023256	,	0.034884	,	0.02907	,	0.055233	,	0.02907	,	0.052326	,	0.031977	,	0.040698	,	0.037791	,	0.049419	,	0.034884	,	0.023256	,	0.052326	,	0.02907	,	0.037791	,	0.026163	,	0.02907	,	0.026163	,	0.023256	,	0.037791	,	0.037791	,	0.026163	,	0.037791	,	0.037791	,	0.037791	,	0.014535	,	0.017442	,	0.031977	,	0.026163	,	0.034884	,
0.040698	,	0.037791	,	0.037791	,	0.034884	,	0.055233	,	0.063953	,	0.040698	,	0.043605	,	0.037791	,	0.034884	,	0.055233	,	0.055233	,	0.046512	,	0.02907	,	0.034884	,	0.049419	,	0.037791	,	0.055233	,	0.02907	,	0.052326	,	0.034884	,	0.02907	,	0.046512	,	0.037791	,	0.037791	,	0.017442	,	0.026163	,	0.017442	,	0.049419	,	0.072674	,	0.037791	,	0.040698	,	0.031977	,	0.026163	,	0.037791	,	0.040698	,	0.02907	,	0.043605	,	0.034884	,	0.040698	,	0.055233	,	0.05814	,	0.034884	,	0.046512	,	0.049419	,	0.05814	,	0.05814	,	0.037791	,	0.031977	,	0.031977	,	0.049419	,	0.043605	,	0.061047	,	0.043605	,	0.055233	,	0.052326	,	0.052326	,	0.046512	,	0.063953	,	0.040698	,
0.055233	,	0.078488	,	0.09593	,	0.090116	,	0.084302	,	0.078488	,	0.081395	,	0.078488	,	0.072674	,	0.055233	,	0.063953	,	0.031977	,	0.02907	,	0.037791	,	0.043605	,	0.055233	,	0.055233	,	0.046512	,	0.055233	,	0.052326	,	0.061047	,	0.061047	,	0.046512	,	0.05814	,	0.055233	,	0.06686	,	0.09593	,	0.043605	,	0.05814	,	0.069767	,	0.055233	,	0.069767	,	0.09593	,	0.078488	,	0.075581	,	0.072674	,	0.072674	,	0.090116	,	0.063953	,	0.06686	,	0.075581	,	0.061047	,	0.098837	,	0.078488	,	0.063953	,	0.072674	,	0.069767	,	0.087209	,	0.049419	,	0.063953	,	0.063953	,	0.043605	,	0.087209	,	0.055233	,	0.084302	,	0.052326	,	0.075581	,	0.055233	,	0.06686	,	0.084302	,
0.037791	,	0.043605	,	0.052326	,	0.052326	,	0.031977	,	0.037791	,	0.043605	,	0.055233	,	0.034884	,	0.040698	,	0.031977	,	0.040698	,	0.040698	,	0.037791	,	0.046512	,	0.037791	,	0.037791	,	0.037791	,	0.020349	,	0.049419	,	0.034884	,	0.023256	,	0.040698	,	0.034884	,	0.031977	,	0.034884	,	0.023256	,	0.037791	,	0.043605	,	0.02907	,	0.020349	,	0.040698	,	0.02907	,	0.037791	,	0.052326	,	0.055233	,	0.046512	,	0.031977	,	0.034884	,	0.043605	,	0.034884	,	0.046512	,	0.055233	,	0.02907	,	0.049419	,	0.040698	,	0.037791	,	0.061047	,	0.055233	,	0.055233	,	0.043605	,	0.049419	,	0.031977	,	0.037791	,	0.031977	,	0.026163	,	0.031977	,	0.034884	,	0.052326	,	0.040698	,
0.023256	,	0.023256	,	0.020349	,	0.011628	,	0.026163	,	0.026163	,	0.026163	,	0.023256	,	0.023256	,	0.031977	,	0.020349	,	0.023256	,	0.020349	,	0.014535	,	0.011628	,	0.011628	,	0.014535	,	0.0087209	,	0.011628	,	0.005814	,	0.005814	,	0.014535	,	0.005814	,	0.014535	,	0.017442	,	0.023256	,	0.011628	,	0.023256	,	0.023256	,	0.017442	,	0.014535	,	0.037791	,	0.011628	,	0.023256	,	0.020349	,	0.011628	,	0.005814	,	0.005814	,	0.026163	,	0.011628	,	0.011628	,	0.0087209	,	0.026163	,	0.0087209	,	0.014535	,	0.011628	,	0.020349	,	0.0087209	,	0.005814	,	0.014535	,	0.017442	,	0.017442	,	0.002907	,	0.0087209	,	0.014535	,	0.014535	,	0	,	0.017442	,	0.005814	,	0.005814	,
0.026163	,	0.005814	,	0.0087209	,	0.034884	,	0.034884	,	0.037791	,	0.014535	,	0.020349	,	0.023256	,	0.023256	,	0.02907	,	0.020349	,	0.043605	,	0.040698	,	0.040698	,	0.02907	,	0.020349	,	0.02907	,	0.017442	,	0.017442	,	0.031977	,	0.017442	,	0.017442	,	0.017442	,	0.014535	,	0.020349	,	0.023256	,	0.014535	,	0.02907	,	0.043605	,	0.031977	,	0.02907	,	0.023256	,	0.020349	,	0.017442	,	0.020349	,	0.031977	,	0.037791	,	0.026163	,	0.014535	,	0.026163	,	0.02907	,	0.046512	,	0.040698	,	0.02907	,	0.040698	,	0.023256	,	0.017442	,	0.026163	,	0.031977	,	0.017442	,	0.023256	,	0.031977	,	0.020349	,	0.023256	,	0.026163	,	0.026163	,	0.020349	,	0.0087209	,	0.023256	,
0.040698	,	0.040698	,	0.061047	,	0.031977	,	0.043605	,	0.037791	,	0.043605	,	0.046512	,	0.061047	,	0.06686	,	0.049419	,	0.087209	,	0.06686	,	0.069767	,	0.05814	,	0.093023	,	0.069767	,	0.084302	,	0.061047	,	0.087209	,	0.06686	,	0.063953	,	0.063953	,	0.049419	,	0.075581	,	0.087209	,	0.063953	,	0.063953	,	0.034884	,	0.055233	,	0.034884	,	0.034884	,	0.05814	,	0.043605	,	0.037791	,	0.037791	,	0.046512	,	0.043605	,	0.040698	,	0.040698	,	0.046512	,	0.049419	,	0.06686	,	0.072674	,	0.061047	,	0.037791	,	0.046512	,	0.046512	,	0.052326	,	0.040698	,	0.055233	,	0.05814	,	0.052326	,	0.052326	,	0.040698	,	0.034884	,	0.049419	,	0.034884	,	0.043605	,	0.017442	,
0.1686	,	0.16279	,	0.15407	,	0.15116	,	0.15116	,	0.14535	,	0.14535	,	0.14244	,	0.14244	,	0.14244	,	0.14244	,	0.13953	,	0.13663	,	0.13372	,	0.13081	,	0.13081	,	0.125	,	0.12209	,	0.11628	,	0.11047	,	0.09593	,	0.084302	,	0.072674	,	0.072674	,	0.061047	,	0.055233	,	0.040698	,	0.026163	,	0.002907	,	0	,	0.005814	,	0.017442	,	0.020349	,	0.037791	,	0.05814	,	0.069767	,	0.078488	,	0.084302	,	0.098837	,	0.11628	,	0.12209	,	0.13372	,	0.13953	,	0.14535	,	0.15407	,	0.1657	,	0.17442	,	0.17733	,	0.18314	,	0.18895	,	0.19186	,	0.19477	,	0.20349	,	0.2093	,	0.21512	,	0.22384	,	0.22674	,	0.22674	,	0.22674	,	0.23256	,

};


double PWMneg[21][60]=
{

0.068799	,	0.062279	,	0.078878	,	0.06093	,	0.06889	,	0.071471	,	0.067465	,	0.071433	,	0.080381	,	0.073811	,	0.063959	,	0.064599	,	0.072273	,	0.069875	,	0.062756	,	0.079485	,	0.068718	,	0.084023	,	0.075477	,	0.079997	,	0.080939	,	0.070561	,	0.071433	,	0.064416	,	0.077326	,	0.078218	,	0.066267	,	0.073892	,	0.069541	,	0.061953	,	0.06382	,	0.090355	,	0.070776	,	0.063538	,	0.067968	,	0.067238	,	0.060009	,	0.063858	,	0.07084	,	0.06907	,	0.071843	,	0.078991	,	0.067102	,	0.072439	,	0.07643	,	0.061709	,	0.068567	,	0.057506	,	0.059203	,	0.067523	,	0.068209	,	0.071535	,	0.071584	,	0.069009	,	0.065828	,	0.068776	,	0.071919	,	0.077497	,	0.069593	,	0.06909	,
0.046721	,	0.052634	,	0.048892	,	0.048828	,	0.052125	,	0.051448	,	0.049012	,	0.047875	,	0.046262	,	0.058826	,	0.051285	,	0.049698	,	0.05427	,	0.047866	,	0.049102	,	0.048119	,	0.051863	,	0.053997	,	0.071093	,	0.052174	,	0.048584	,	0.040968	,	0.039983	,	0.052651	,	0.054503	,	0.054453	,	0.050151	,	0.050942	,	0.040695	,	0.049712	,	0.052163	,	0.04564	,	0.053782	,	0.044235	,	0.051352	,	0.046413	,	0.050817	,	0.049878	,	0.044852	,	0.055517	,	0.052061	,	0.045759	,	0.056349	,	0.047529	,	0.063672	,	0.045892	,	0.062892	,	0.052186	,	0.053413	,	0.051555	,	0.049131	,	0.050148	,	0.042131	,	0.05193	,	0.059465	,	0.052919	,	0.050503	,	0.045561	,	0.053267	,	0.054645	,
0.043282	,	0.044875	,	0.044689	,	0.034209	,	0.036828	,	0.04261	,	0.028712	,	0.040233	,	0.044578	,	0.044898	,	0.038276	,	0.04168	,	0.036442	,	0.04202	,	0.040145	,	0.042477	,	0.036006	,	0.046692	,	0.03232	,	0.042892	,	0.040166	,	0.03743	,	0.043887	,	0.044541	,	0.043898	,	0.035064	,	0.038215	,	0.039878	,	0.037491	,	0.049166	,	0.037715	,	0.038706	,	0.047099	,	0.04341	,	0.045238	,	0.045576	,	0.038657	,	0.041477	,	0.027561	,	0.040747	,	0.032878	,	0.045863	,	0.034637	,	0.030105	,	0.04425	,	0.037747	,	0.047674	,	0.03211	,	0.035968	,	0.042308	,	0.037657	,	0.034052	,	0.033087	,	0.04541	,	0.048134	,	0.035201	,	0.036584	,	0.03493	,	0.045631	,	0.040654	,
0.039756	,	0.038657	,	0.029032	,	0.05566	,	0.037689	,	0.047692	,	0.047712	,	0.042201	,	0.037759	,	0.042741	,	0.037855	,	0.037895	,	0.044872	,	0.046494	,	0.040648	,	0.045125	,	0.044695	,	0.043192	,	0.04989	,	0.042009	,	0.047302	,	0.040302	,	0.044794	,	0.042968	,	0.067372	,	0.049686	,	0.051317	,	0.053061	,	0.045526	,	0.045881	,	0.036945	,	0.056427	,	0.040985	,	0.04618	,	0.057218	,	0.038314	,	0.04686	,	0.03509	,	0.044555	,	0.045817	,	0.051718	,	0.046756	,	0.054831	,	0.038765	,	0.053372	,	0.050515	,	0.041741	,	0.048334	,	0.041279	,	0.047099	,	0.051061	,	0.042759	,	0.044573	,	0.045218	,	0.047837	,	0.041779	,	0.046233	,	0.044936	,	0.037189	,	0.041212	,
0.041064	,	0.031029	,	0.039872	,	0.035032	,	0.04527	,	0.029291	,	0.036224	,	0.040974	,	0.04468	,	0.027506	,	0.032349	,	0.040067	,	0.044265	,	0.039564	,	0.03861	,	0.041971	,	0.047163	,	0.053477	,	0.036503	,	0.043442	,	0.034884	,	0.035669	,	0.04061	,	0.03341	,	0.034404	,	0.047134	,	0.030206	,	0.036297	,	0.038392	,	0.031227	,	0.032616	,	0.037642	,	0.037997	,	0.033826	,	0.047523	,	0.036724	,	0.035785	,	0.043576	,	0.039558	,	0.037578	,	0.04041	,	0.037235	,	0.05277	,	0.047805	,	0.043573	,	0.040683	,	0.042035	,	0.042558	,	0.040302	,	0.033189	,	0.027919	,	0.048837	,	0.042765	,	0.037483	,	0.030628	,	0.046895	,	0.036047	,	0.037689	,	0.03114	,	0.04368	,
0.039651	,	0.034308	,	0.02764	,	0.032151	,	0.034235	,	0.02818	,	0.040776	,	0.040724	,	0.032456	,	0.031744	,	0.045424	,	0.043477	,	0.04018	,	0.043968	,	0.038145	,	0.032645	,	0.040413	,	0.038919	,	0.041413	,	0.043747	,	0.03302	,	0.033782	,	0.036433	,	0.031968	,	0.03673	,	0.037672	,	0.032494	,	0.039765	,	0.034038	,	0.044483	,	0.042773	,	0.035352	,	0.020047	,	0.03161	,	0.040852	,	0.035331	,	0.029358	,	0.039788	,	0.031119	,	0.035605	,	0.040651	,	0.033439	,	0.035288	,	0.038523	,	0.031407	,	0.040573	,	0.037913	,	0.031977	,	0.037858	,	0.041148	,	0.036564	,	0.032988	,	0.037195	,	0.028587	,	0.037613	,	0.038311	,	0.030599	,	0.035628	,	0.033305	,	0.033076	,
0.054297	,	0.062041	,	0.068119	,	0.052073	,	0.049288	,	0.064968	,	0.058096	,	0.049267	,	0.052741	,	0.057047	,	0.055863	,	0.054096	,	0.056157	,	0.062956	,	0.052669	,	0.05764	,	0.053067	,	0.043645	,	0.048637	,	0.058081	,	0.05107	,	0.054881	,	0.049724	,	0.06868	,	0.057241	,	0.055299	,	0.048744	,	0.054099	,	0.045776	,	0.047093	,	0.06248	,	0.058547	,	0.052221	,	0.04952	,	0.052334	,	0.067765	,	0.057288	,	0.054916	,	0.052741	,	0.05964	,	0.042081	,	0.058654	,	0.055988	,	0.057253	,	0.057794	,	0.053009	,	0.046439	,	0.058483	,	0.067727	,	0.055253	,	0.052297	,	0.054788	,	0.044587	,	0.054767	,	0.059084	,	0.049901	,	0.051381	,	0.053875	,	0.048692	,	0.055805	,
0.055762	,	0.063674	,	0.061113	,	0.071782	,	0.069782	,	0.054221	,	0.072529	,	0.072642	,	0.058453	,	0.069209	,	0.06186	,	0.061009	,	0.055535	,	0.067956	,	0.064628	,	0.067436	,	0.069323	,	0.063724	,	0.075552	,	0.064744	,	0.053395	,	0.071881	,	0.066145	,	0.081561	,	0.075334	,	0.080631	,	0.089968	,	0.055052	,	0.071657	,	0.062032	,	0.069945	,	0.057517	,	0.07366	,	0.074747	,	0.053904	,	0.07127	,	0.070916	,	0.070323	,	0.077779	,	0.071797	,	0.062701	,	0.057631	,	0.069544	,	0.048	,	0.059866	,	0.063689	,	0.049183	,	0.069715	,	0.052407	,	0.056276	,	0.06534	,	0.070744	,	0.060942	,	0.05525	,	0.073808	,	0.058715	,	0.079366	,	0.057512	,	0.058	,	0.062645	,
0.016988	,	0.024235	,	0.02316	,	0.020407	,	0.022262	,	0.02064	,	0.022791	,	0.024709	,	0.022831	,	0.01891	,	0.021084	,	0.028349	,	0.020253	,	0.021773	,	0.022314	,	0.020788	,	0.025282	,	0.020747	,	0.021064	,	0.024003	,	0.025323	,	0.026695	,	0.025087	,	0.018648	,	0.030485	,	0.025064	,	0.026535	,	0.021506	,	0.022413	,	0.031346	,	0.029747	,	0.021462	,	0.023744	,	0.025113	,	0.026326	,	0.016276	,	0.020576	,	0.027422	,	0.018701	,	0.02016	,	0.025858	,	0.02434	,	0.015567	,	0.024462	,	0.019858	,	0.026927	,	0.019683	,	0.01959	,	0.021581	,	0.031456	,	0.021901	,	0.032904	,	0.024317	,	0.020526	,	0.020049	,	0.020945	,	0.027913	,	0.021526	,	0.023265	,	0.022881	,
0.056872	,	0.036968	,	0.038227	,	0.048047	,	0.038808	,	0.046506	,	0.045436	,	0.049683	,	0.05034	,	0.051669	,	0.050788	,	0.037241	,	0.054459	,	0.04977	,	0.04934	,	0.04698	,	0.044448	,	0.043962	,	0.048547	,	0.03784	,	0.036174	,	0.048951	,	0.049561	,	0.048407	,	0.04568	,	0.037189	,	0.049573	,	0.059913	,	0.052602	,	0.048558	,	0.035201	,	0.047253	,	0.039297	,	0.064058	,	0.043512	,	0.042628	,	0.053131	,	0.050866	,	0.041369	,	0.054532	,	0.058924	,	0.042177	,	0.048619	,	0.055134	,	0.048759	,	0.040311	,	0.049523	,	0.052166	,	0.051951	,	0.0465	,	0.051657	,	0.042951	,	0.048108	,	0.050581	,	0.04873	,	0.047369	,	0.048727	,	0.041904	,	0.053817	,	0.045805	,
0.093462	,	0.093302	,	0.087349	,	0.082422	,	0.10267	,	0.089442	,	0.081456	,	0.083715	,	0.095683	,	0.089427	,	0.10352	,	0.10421	,	0.07691	,	0.075985	,	0.082506	,	0.10279	,	0.081578	,	0.087142	,	0.081788	,	0.096192	,	0.1029	,	0.085465	,	0.093779	,	0.080029	,	0.084956	,	0.076337	,	0.082148	,	0.094526	,	0.10957	,	0.098468	,	0.080392	,	0.092558	,	0.095166	,	0.09407	,	0.090651	,	0.084988	,	0.093971	,	0.079483	,	0.10157	,	0.091198	,	0.075581	,	0.088547	,	0.087544	,	0.10008	,	0.093831	,	0.097017	,	0.085323	,	0.09989	,	0.083805	,	0.087765	,	0.095919	,	0.073157	,	0.09148	,	0.09436	,	0.083064	,	0.080971	,	0.095721	,	0.10144	,	0.08961	,	0.08739	,
0.049942	,	0.051015	,	0.047363	,	0.053273	,	0.052765	,	0.047831	,	0.04943	,	0.053	,	0.043535	,	0.053759	,	0.049762	,	0.045744	,	0.04884	,	0.051061	,	0.04525	,	0.050023	,	0.046052	,	0.048802	,	0.055881	,	0.041323	,	0.041951	,	0.05184	,	0.046151	,	0.045884	,	0.041715	,	0.051477	,	0.051404	,	0.044887	,	0.047669	,	0.05091	,	0.055017	,	0.043439	,	0.051951	,	0.047532	,	0.056558	,	0.044922	,	0.044747	,	0.045006	,	0.059209	,	0.038985	,	0.052945	,	0.052552	,	0.041852	,	0.051363	,	0.055218	,	0.047808	,	0.059358	,	0.061826	,	0.053078	,	0.050741	,	0.048843	,	0.047491	,	0.055302	,	0.048573	,	0.050358	,	0.054552	,	0.03966	,	0.051323	,	0.059686	,	0.048547	,
0.015814	,	0.020567	,	0.02082	,	0.017648	,	0.022561	,	0.020119	,	0.021384	,	0.020372	,	0.020619	,	0.020552	,	0.017064	,	0.028017	,	0.019387	,	0.01698	,	0.01916	,	0.017919	,	0.016512	,	0.020471	,	0.016759	,	0.02591	,	0.022294	,	0.021672	,	0.020695	,	0.020622	,	0.02441	,	0.018994	,	0.023913	,	0.01925	,	0.021073	,	0.016547	,	0.015892	,	0.018613	,	0.019602	,	0.013064	,	0.014747	,	0.020366	,	0.020192	,	0.012674	,	0.023299	,	0.016846	,	0.019724	,	0.017145	,	0.016756	,	0.021087	,	0.016703	,	0.018494	,	0.023201	,	0.017358	,	0.016814	,	0.015279	,	0.01936	,	0.019799	,	0.015738	,	0.02064	,	0.016142	,	0.02332	,	0.016122	,	0.016581	,	0.02189	,	0.016637	,
0.038224	,	0.045939	,	0.039233	,	0.03702	,	0.033145	,	0.037108	,	0.03866	,	0.038084	,	0.039474	,	0.038267	,	0.036323	,	0.043366	,	0.044331	,	0.042509	,	0.049564	,	0.044608	,	0.039814	,	0.029488	,	0.026669	,	0.026145	,	0.044983	,	0.043666	,	0.03841	,	0.042323	,	0.036831	,	0.046058	,	0.038006	,	0.047369	,	0.043276	,	0.049698	,	0.04632	,	0.038151	,	0.033628	,	0.046942	,	0.044337	,	0.042988	,	0.047613	,	0.037779	,	0.044433	,	0.03709	,	0.037256	,	0.040172	,	0.049125	,	0.036831	,	0.033122	,	0.027721	,	0.041023	,	0.037913	,	0.033994	,	0.039227	,	0.036799	,	0.043215	,	0.050326	,	0.039959	,	0.038887	,	0.03214	,	0.030328	,	0.047933	,	0.039773	,	0.037555	,
0.052041	,	0.048869	,	0.055875	,	0.063375	,	0.047602	,	0.051878	,	0.056596	,	0.047084	,	0.043305	,	0.048805	,	0.055797	,	0.055401	,	0.060512	,	0.050343	,	0.050837	,	0.058823	,	0.057221	,	0.046581	,	0.051712	,	0.050811	,	0.051881	,	0.05598	,	0.05402	,	0.06589	,	0.046666	,	0.049593	,	0.044407	,	0.054677	,	0.052346	,	0.052802	,	0.051916	,	0.052605	,	0.074035	,	0.052238	,	0.056372	,	0.065817	,	0.063445	,	0.057971	,	0.050866	,	0.044922	,	0.061337	,	0.04986	,	0.03977	,	0.04018	,	0.048215	,	0.054526	,	0.042381	,	0.047878	,	0.057084	,	0.058137	,	0.05191	,	0.053201	,	0.047698	,	0.06416	,	0.054576	,	0.045564	,	0.047648	,	0.041151	,	0.047	,	0.053657	,
0.07032	,	0.067073	,	0.071913	,	0.069538	,	0.074299	,	0.077224	,	0.069971	,	0.073683	,	0.080852	,	0.077445	,	0.080294	,	0.067945	,	0.066381	,	0.080302	,	0.080233	,	0.072154	,	0.081965	,	0.06716	,	0.073605	,	0.079352	,	0.082494	,	0.084369	,	0.085558	,	0.069055	,	0.07268	,	0.074608	,	0.066494	,	0.07189	,	0.069233	,	0.077241	,	0.088189	,	0.074552	,	0.085985	,	0.088773	,	0.067846	,	0.07559	,	0.070233	,	0.079015	,	0.075753	,	0.077267	,	0.085541	,	0.07082	,	0.069334	,	0.080953	,	0.060497	,	0.069773	,	0.083186	,	0.064006	,	0.06702	,	0.06882	,	0.070471	,	0.066794	,	0.067201	,	0.054189	,	0.068279	,	0.079006	,	0.078863	,	0.069541	,	0.062759	,	0.072299	,
0.068596	,	0.061346	,	0.06243	,	0.073608	,	0.06048	,	0.06809	,	0.06125	,	0.05932	,	0.067337	,	0.057552	,	0.068203	,	0.061468	,	0.065023	,	0.059064	,	0.066119	,	0.05868	,	0.058706	,	0.064029	,	0.060802	,	0.073267	,	0.068462	,	0.065971	,	0.069328	,	0.054677	,	0.061558	,	0.069422	,	0.062791	,	0.076049	,	0.065471	,	0.07341	,	0.073701	,	0.067741	,	0.050663	,	0.056834	,	0.059078	,	0.057564	,	0.074631	,	0.05936	,	0.067549	,	0.067666	,	0.062892	,	0.059346	,	0.06532	,	0.067206	,	0.061721	,	0.069206	,	0.057985	,	0.054044	,	0.065206	,	0.059971	,	0.066718	,	0.06202	,	0.065651	,	0.054709	,	0.05641	,	0.05677	,	0.047904	,	0.05982	,	0.060485	,	0.062698	,
0.016137	,	0.015782	,	0.014549	,	0.012259	,	0.02016	,	0.017012	,	0.017436	,	0.01925	,	0.017919	,	0.013622	,	0.015846	,	0.012265	,	0.01423	,	0.018366	,	0.014712	,	0.01152	,	0.012128	,	0.016055	,	0.020049	,	0.011637	,	0.012695	,	0.016468	,	0.015715	,	0.02986	,	0.016102	,	0.013948	,	0.0099186	,	0.012154	,	0.020122	,	0.0091163	,	0.023924	,	0.014578	,	0.014392	,	0.015683	,	0.013253	,	0.027035	,	0.014977	,	0.016733	,	0.01714	,	0.015924	,	0.011933	,	0.023267	,	0.023517	,	0.017762	,	0.012366	,	0.016747	,	0.014081	,	0.008218	,	0.013372	,	0.013183	,	0.018427	,	0.015206	,	0.012985	,	0.016448	,	0.0087645	,	0.016067	,	0.016233	,	0.012535	,	0.015858	,	0.0096599	,
0.028035	,	0.036247	,	0.026154	,	0.02693	,	0.033727	,	0.031218	,	0.035703	,	0.034547	,	0.029573	,	0.035852	,	0.025	,	0.032689	,	0.032314	,	0.032285	,	0.031241	,	0.026919	,	0.032358	,	0.032349	,	0.024718	,	0.026927	,	0.037238	,	0.037044	,	0.039355	,	0.031916	,	0.021326	,	0.035186	,	0.04632	,	0.029695	,	0.040311	,	0.032221	,	0.033791	,	0.029709	,	0.033282	,	0.034974	,	0.032032	,	0.036387	,	0.037052	,	0.036706	,	0.040445	,	0.023294	,	0.028834	,	0.029695	,	0.032349	,	0.03414	,	0.034076	,	0.044843	,	0.030477	,	0.033555	,	0.028209	,	0.030003	,	0.026814	,	0.030067	,	0.036942	,	0.04086	,	0.032163	,	0.041424	,	0.027666	,	0.039852	,	0.034512	,	0.024849	,
0.059491	,	0.066151	,	0.073273	,	0.065459	,	0.059622	,	0.065747	,	0.064326	,	0.057852	,	0.059544	,	0.057218	,	0.05939	,	0.06241	,	0.068314	,	0.056326	,	0.080855	,	0.053753	,	0.072544	,	0.076538	,	0.069631	,	0.063837	,	0.070756	,	0.063991	,	0.058564	,	0.062645	,	0.063081	,	0.057834	,	0.088291	,	0.062808	,	0.072235	,	0.068137	,	0.065265	,	0.074253	,	0.076227	,	0.063087	,	0.066105	,	0.063427	,	0.055794	,	0.08352	,	0.054468	,	0.07966	,	0.064241	,	0.074936	,	0.060924	,	0.06373	,	0.056922	,	0.063326	,	0.067273	,	0.076689	,	0.083081	,	0.066843	,	0.064331	,	0.067087	,	0.063823	,	0.061532	,	0.053887	,	0.060924	,	0.071067	,	0.057683	,	0.063442	,	0.063317	,
0.044747	,	0.043009	,	0.041419	,	0.039349	,	0.037791	,	0.037305	,	0.035035	,	0.033352	,	0.031677	,	0.03114	,	0.030058	,	0.028378	,	0.025052	,	0.024535	,	0.021166	,	0.020145	,	0.020145	,	0.019006	,	0.017892	,	0.015669	,	0.013485	,	0.012416	,	0.010767	,	0.0098488	,	0.0077006	,	0.0061337	,	0.0028372	,	0.0022907	,	0.00056395	,	0	,	0.002189	,	0.0048983	,	0.0054622	,	0.010564	,	0.012794	,	0.013381	,	0.013951	,	0.014561	,	0.016195	,	0.016686	,	0.02059	,	0.022814	,	0.022814	,	0.026648	,	0.028349	,	0.029483	,	0.030061	,	0.034	,	0.036645	,	0.037724	,	0.038672	,	0.040256	,	0.043567	,	0.045808	,	0.046294	,	0.048451	,	0.049517	,	0.051087	,	0.051087	,	0.053898	,

};




int main(int argc, char* argv[])
{

	int i,j;
	char siger_seq[100];

	FILE *fp;
    int lines_fasta,lines_fasta_petide;


	double XR,XRS[8000]={0};
	char ch;
	int col;
 	
char *pp1[5]={"-b","1","Dtest.txt", "Train.txt.model","Xesubresult.out"};
// predict funtion.
	


	
	


////////////////////////////////////////////
	double cutoff=0.05; 
	char threshold[7]="Low\0";
	char *file[30];
	file[0]=argv[1];
    strcpy(threshold,argv[2]);
	printf("%s\n",threshold);
		
	if(strcmp(threshold,"Low")==0)
		cutoff=0.05;	
	else if(strcmp(threshold,"Medium")==0)
		cutoff=0.15;	
	else if(strcmp(threshold,"High")==0)
		cutoff=0.25;



//////////////////////////////////////////////////////

// above define the cutoff values.







	lines_fasta=get_data_fasta(file[0]);
	seq_long=61;
	lines_fasta_petide=add_window(seq_long,lines_fasta,long_fasta);








double asa[120];
for(i=0;i<lines_fasta_petide;i++)
{
	for(j=0;j<=60;j++)
	{
		if(j<30)
			ch=c_seq[i][j];
		else
			ch=c_seq[i][j+1];
		siger_seq[j]=ch;
	}
    aPWM_code(PWMpos,PWMneg,siger_seq,60,120,asa); 
    for(j=0;j<120;j++)
	{
		code_Test[i][j]=asa[j]/0.2326;	
		
	}

  
}
// code the test sequences.
   





  



fp=fopen("Dtest.txt","w");
	for(i=0;i<lines_fasta_petide;i++)
	{
		fprintf(fp,"%d",-1);
		for(j=0;j<120;j++)
		{
			fprintf(fp,"%5d",j+1);
			fprintf(fp,":");
			fprintf(fp,"");
			fprintf(fp,"%f",code_Test[i][j]);
		}		
		
		fprintf(fp,"\n");
	}

	fclose(fp);


// Tansform the testing file as the format of libsvm

////////////////////////////////////////////////////////////////////
	

    main_predict(5,pp1);

//	printf("plese check the Result.txt");

	




/////////// below is read the result of libsvm.
      fp=fopen("Xesubresult.out","r");
		fseek(fp,7,0);
	
		ch=fgetc(fp);
		if (ch=='-')
			col=2;
		else
			col=1;
		while(fgetc(fp)!=10);
		i=0;
		if(col==1)
		{
			fscanf(fp,"%lf",&XR);
			fscanf(fp,"%lf",&XR);
		}
		else
		{
			fscanf(fp,"%lf",&XR);
			fscanf(fp,"%lf",&XR);
			fscanf(fp,"%lf",&XR);
		}
		XRS[0]=XR;
 for(i=1;i<lines_fasta_petide;i++)
		{			
			for(j=0;j<3;j++)
				fscanf(fp,"%lf",&XR);
			XRS[i]=XR;
			
		}
	fclose(fp);


    fp=fopen("Result.txt","w");
	fprintf(fp,"Pos   Site     Score     Prediction Palm\n");
////////////get the name of the protein
FILE* f_fast=fopen(file[0],"r");
	ch=fgetc(f_fast);
	while(ch!=10)
	{
		fprintf(fp,"%c",ch);
		ch=fgetc(f_fast);
	}
	fprintf(fp,"\n");





int tk=0;

	for(i=0;i<lines_fasta_petide;i++)
	{			

      if(i==seat_lines[tk])
		{
		
			while(ch!='>')ch=fgetc(f_fast);
			while(ch!=10)
			{
				fprintf(fp,"%c",ch);
				ch=fgetc(f_fast);
			}

		
			fprintf(fp,"\n");
			tk++;
	  }



		fprintf(fp,"%d   ",site_position[i]);
		fprintf(fp," C     ");
		fprintf(fp,"%lf      ",XRS[i]);
		if(XRS[i]>=cutoff)
			fprintf(fp,"Palm\n");
		else
			fprintf(fp,"No Palm\n");






	}
	fclose(fp);

system("del Xesubresult.out");
  
system("del Dtest.txt");	
	
	
	 system("cls");


	printf("plese check the Result.txt");


	return 0;

}















void parse_command_line(int argc, char **argv, char *input_file_name, char *model_file_name);
void read_problem(const char *filename);
void do_cross_validation();

struct svm_parameter param;		// set by parse_command_line
struct svm_problem prob;		// set by read_problem
struct svm_model *model;
struct svm_node *x_space;
int cross_validation;
int nr_fold;

int main_train(int argc, char **argv)
{
	char input_file_name[1024];
	char model_file_name[1024];
	const char *error_msg;

	parse_command_line(argc, argv, input_file_name, model_file_name);
	read_problem(input_file_name);
	error_msg = svm_check_parameter(&prob,&param);

	if(error_msg)
	{
		fprintf(stderr,"Error: %s\n",error_msg);
		exit(1);
	}

	if(cross_validation)
	{
		do_cross_validation();
	}
	else
	{
		model = svm_train(&prob,&param);
		svm_save_model(model_file_name,model);
	    svm_destroy_model(model);
	}
	svm_destroy_param(&param);
	free(prob.y);
	free(prob.x);
	free(x_space);

	return 0;
}

void do_cross_validation()
{
	int i;
	int total_correct = 0;
	double total_error = 0;
	double sumv = 0, sumy = 0, sumvv = 0, sumyy = 0, sumvy = 0;
	double *target = Malloc(double,prob.l);

	svm_cross_validation(&prob,&param,nr_fold,target);
	if(param.svm_type == EPSILON_SVR ||
	   param.svm_type == NU_SVR)
	{
		for(i=0;i<prob.l;i++)
		{
			double y = prob.y[i];
			double v = target[i];
			total_error += (v-y)*(v-y);
			sumv += v;
			sumy += y;
			sumvv += v*v;
			sumyy += y*y;
			sumvy += v*y;
		}
		printf("Cross Validation Mean squared error = %g\n",total_error/prob.l);
		printf("Cross Validation Squared correlation coefficient = %g\n",
			((prob.l*sumvy-sumv*sumy)*(prob.l*sumvy-sumv*sumy))/
			((prob.l*sumvv-sumv*sumv)*(prob.l*sumyy-sumy*sumy))
			);
	}
	else
	{
		for(i=0;i<prob.l;i++)
			if(target[i] == prob.y[i])
				++total_correct;
		printf("Cross Validation Accuracy = %g%%\n",100.0*total_correct/prob.l);
	}
	free(target);
}

void parse_command_line(int argc, char **argv, char *input_file_name, char *model_file_name)
{
	int i;

	// default values
	param.svm_type = C_SVC;
	param.kernel_type = RBF;
	param.degree = 3;
	param.gamma = 0;	// 1/k
	param.coef0 = 0;
	param.nu = 0.5;
	param.cache_size = 100;
	param.C = 1;
	param.eps = 1e-3;
	param.p = 0.1;
	param.shrinking = 1;
	param.probability = 0;
	param.nr_weight = 0;
	param.weight_label = NULL;
	param.weight = NULL;
	cross_validation = 0;

	// parse options
	for(i=0;i<argc-1;i++,i++)
	{
		if(argv[i][0] != '-') break;		

		switch(argv[i][1])
		{
			case 's':
				param.svm_type = atoi(argv[i+1]);
				break;
			case 't':
				param.kernel_type = atoi(argv[i+1]);
				break;
			case 'd':
				param.degree = atoi(argv[i+1]);
				break;
			case 'g':
				param.gamma = atof(argv[i+1]);
				break;
			case 'r':
				param.coef0 = atof(argv[i+1]);
				break;
			case 'n':
				param.nu = atof(argv[i+1]);
				break;
			case 'm':
				param.cache_size = atof(argv[i+1]);
				break;
			case 'c':
				param.C = atof(argv[i+1]);
				break;
			case 'e':
				param.eps = atof(argv[i+1]);
				break;
			case 'p':
				param.p = atof(argv[i+1]);
				break;
			case 'h':
				param.shrinking = atoi(argv[i+1]);
				break;
			case 'b':
				param.probability = atoi(argv[i+1]);
				break;
			case 'v':
				cross_validation = 1;
				nr_fold = atoi(argv[i+1]);
				if(nr_fold < 2)
				{
					fprintf(stderr,"n-fold cross validation: n must >= 2\n");

				}
				break;
			case 'w':
				++param.nr_weight;
				param.weight_label = (int *)realloc(param.weight_label,sizeof(int)*param.nr_weight);
				param.weight = (double *)realloc(param.weight,sizeof(double)*param.nr_weight);
				param.weight_label[param.nr_weight-1] = atoi(&argv[i-1][2]);
				param.weight[param.nr_weight-1] = atof(argv[i]);
				break;
			default:
				fprintf(stderr,"unknown option\n");
	
		}
	}

	// determine filenames


	strcpy(input_file_name, argv[i]);

	if(i<argc-1)
		strcpy(model_file_name,argv[i+1]);
	else
	{
		char *p = strrchr(argv[i],'/');
		if(p==NULL)
			p = argv[i];
		else
			++p;
		sprintf(model_file_name,"%s.model",p);
	}
}

// read in a problem (in svmlight format)

void read_problem(const char *filename)
{
	int elements, max_index, i, j;
	FILE *fp = fopen(filename,"r");
	
	if(fp == NULL)
	{
		fprintf(stderr,"can't open input file %s\n",filename);
		exit(1);
	}

	prob.l = 0;
	elements = 0;
	while(1)
	{
		int c = fgetc(fp);
		switch(c)
		{
			case '\n':
				++prob.l;
				// fall through,
				// count the '-1' element
			case ':':
				++elements;
				break;
			case EOF:
				goto out;
			default:
				;
		}
	}
out:
	rewind(fp);

	prob.y = Malloc(double,prob.l);
	prob.x = Malloc(struct svm_node *,prob.l);
	x_space = Malloc(struct svm_node,elements);

	max_index = 0;
	j=0;
	for(i=0;i<prob.l;i++)
	{
		double label;
		prob.x[i] = &x_space[j];
		fscanf(fp,"%lf",&label);
		prob.y[i] = label;

		while(1)
		{
			int c;
			do {
				c = getc(fp);
				if(c=='\n') goto out2;
			} while(isspace(c));
			ungetc(c,fp);
			if (fscanf(fp,"%d:%lf",&(x_space[j].index),&(x_space[j].value)) < 2)
			{
				fprintf(stderr,"Wrong input format at line %d\n", i+1);
				exit(1);
			}
			++j;
		}	
out2:
		if(j>=1 && x_space[j-1].index > max_index)
			max_index = x_space[j-1].index;
		x_space[j++].index = -1;
	}

	if(param.gamma == 0)
		param.gamma = 1.0/max_index;

	if(param.kernel_type == PRECOMPUTED)
		for(i=0;i<prob.l;i++)
		{
			if (prob.x[i][0].index != 0)
			{
				fprintf(stderr,"Wrong input format: first column must be 0:sample_serial_number\n");
				exit(1);
			}
			if ((int)prob.x[i][0].value <= 0 || (int)prob.x[i][0].value > max_index)
			{
				fprintf(stderr,"Wrong input format: sample_serial_number out of range\n");
				exit(1);
			}
		}

	fclose(fp);
}



char* line;
int max_line_len = 1024;
struct svm_node *x;
int max_nr_attr = 64;

struct svm_model* model1;
int predict_probability=0;

void predict(FILE *input, FILE *output)
{
	int correct = 0;
	int total = 0;
	double error = 0;
	double sumv = 0, sumy = 0, sumvv = 0, sumyy = 0, sumvy = 0;

	int svm_type=svm_get_svm_type(model1);
	int nr_class=svm_get_nr_class(model1);
	double *prob_estimates=NULL;
	int j;

	if(predict_probability)
	{
		if (svm_type==NU_SVR || svm_type==EPSILON_SVR)
			printf("Prob. model1 for test data: target value = predicted value + z,\nz: Laplace distribution e^(-|z|/sigma)/(2sigma),sigma=%g\n",svm_get_svr_probability(model1));
		else
		{
			int *labels=(int *) malloc(nr_class*sizeof(int));
			svm_get_labels(model1,labels);
			prob_estimates = (double *) malloc(nr_class*sizeof(double));
			fprintf(output,"labels");		
			for(j=0;j<nr_class;j++)
				fprintf(output," %d",labels[j]);
			fprintf(output,"\n");
			free(labels);
		}
	}
	while(1)
	{
		int i = 0;
		int c;
		double target,v;

		if (fscanf(input,"%lf",&target)==EOF)
			break;

		while(1)
		{
			if(i>=max_nr_attr-1)	// need one more for index = -1
			{
				max_nr_attr *= 2;
				x = (struct svm_node *) realloc(x,max_nr_attr*sizeof(struct svm_node));
			}

			do {
				c = getc(input);
				if(c=='\n' || c==EOF) goto out2;
			} while(isspace(c));
			ungetc(c,input);
			if (fscanf(input,"%d:%lf",&x[i].index,&x[i].value) < 2)
			{
				fprintf(stderr,"Wrong input format at line %d\n", total+1);
				exit(1);
			}
			++i;
		}	

out2:
		x[i].index = -1;

		if (predict_probability && (svm_type==C_SVC || svm_type==NU_SVC))
		{
			v = svm_predict_probability(model1,x,prob_estimates);
			fprintf(output,"%g ",v);
			for(j=0;j<nr_class;j++)
				fprintf(output,"%g ",prob_estimates[j]);
			fprintf(output,"\n");
		}
		else
		{
			v = svm_predict(model1,x);
			fprintf(output,"%g\n",v);
		}

		if(v == target)
			++correct;
		error += (v-target)*(v-target);
		sumv += v;
		sumy += target;
		sumvv += v*v;
		sumyy += target*target;
		sumvy += v*target;
		++total;
	}
	if (svm_type==NU_SVR || svm_type==EPSILON_SVR)
	{
		printf("Mean squared error = %g (regression)\n",error/total);
		printf("Squared correlation coefficient = %g (regression)\n",
		       ((total*sumvy-sumv*sumy)*(total*sumvy-sumv*sumy))/
		       ((total*sumvv-sumv*sumv)*(total*sumyy-sumy*sumy))
		       );
	}
	else
		printf("Accuracy = %g%% (%d/%d) (classification)\n",
		       (double)correct/total*100,correct,total);
	if(predict_probability)
		free(prob_estimates);
}

void exit_with_help()
{
	printf(
	"Usage: svm-predict [options] test_file model_file output_file\n"
	"options:\n"
	"-b probability_estimates: whether to predict probability estimates, 0 or 1 (default 0); for one-class SVM only 0 is supported\n"
	);
	exit(1);
}

int main_predict(int argc, char **argv)
{
	FILE *input, *output;
	int i;

	// parse options
	for(i=0;i<argc-1;i++)
	{
		if(argv[i][0] != '-') break;
		++i;
		switch(argv[i-1][1])
		{
			case 'b':
				predict_probability = atoi(argv[i]);
				break;
			default:
				fprintf(stderr,"unknown option\n");
				
		}
	}
	
	input = fopen(argv[i],"r");
	if(input == NULL)
	{
		fprintf(stderr,"can't open input file %s\n",argv[i]);
		exit(1);
	}

	output = fopen(argv[i+2],"w");
	if(output == NULL)
	{
		fprintf(stderr,"can't open output file %s\n",argv[i+2]);
		exit(1);
	}

	if((model1=svm_load_model(argv[i+1]))==0)
	{
		fprintf(stderr,"can't open model file %s\n",argv[i+1]);
		exit(1);
	}
	
	line = (char *) malloc(max_line_len*sizeof(char));
	x = (struct svm_node *) malloc(max_nr_attr*sizeof(struct svm_node));
	if(predict_probability)
	{
		if(svm_check_probability_model(model1)==0)
		{
			fprintf(stderr,"Model does not support probabiliy estimates\n");
			exit(1);
		}
	}
	else
	{
		if(svm_check_probability_model(model1)!=0)
			printf("Model supports probability estimates, but disabled in prediction.\n");
	}
	predict(input,output);
	svm_destroy_model(model1);
	free(line);
	free(x);
	fclose(input);
	fclose(output);
	return 0;
}



































int get_data_fasta(char* Test_fasta)
{

    FILE *fp;
	int j,i=0,k=0;
	char ch;

	


	fp=fopen(Test_fasta,"r");
	ch=fgetc(fp);
  while(ch!=EOF&&ch!='?')
{
	if(ch='>')
	{
		j=0;
		while(ch!=10)
			ch=fgetc(fp);
		while((ch=fgetc(fp))!=EOF && ch!='>')
		{
			if(ch==' ')
			{
				ch='?';
				break;
			}
			if(ch!=10)
			seq_fasta[i][j++]=ch;
		}
		long_fasta[i]=j;
		i++;
	}

 }
  fclose(fp);
  return i;

}



int add_window(int seq_long,int lines_fasta,int long_fasta[])
{
int windows=(seq_long-1)/2;	
int ck=0,i=0;
for(int j=0;j<lines_fasta;j++)	
{
	for(int i=long_fasta[j];i>=0;i--)
	{
		seq_fasta[j][windows+i]=seq_fasta[j][i];
	}

	for(i=0;i<windows;i++)
	{
		seq_fasta[j][i]='X';
		seq_fasta[j][windows+long_fasta[j]+i]='X';
	}
}

for(j=0;j<lines_fasta;j++)	
{
	for(int i=windows;i<windows+long_fasta[j];i++)
	{
		if(seq_fasta[j][i]=='C')
		{
			for(int k=0;k<=2*windows;k++)            
			c_seq[ck][k]=seq_fasta[j][i-windows+k];
			site_position[ck]=i+1-windows;
			ck++;
		}
	
	}
	
	seat_lines[j]=ck;
} 	
return ck;
}



//// aPWM_code define the function of code test sequences.

void aPWM_code(double PWMpos[21][60], double PWMneg[21][60], char Seq[],int N,int M,double PWMcode[])
{

char ch;
int index;
int k;
double PWMcodepos[60];
double PWMcodeneg[60];
char model[21]={ 
	'A' , 'R'  ,  'N'  ,  'D'  ,  'C'    ,'Q' ,   'E'  ,
    'G'   , 'H'  ,  'I' ,   'L' ,   'K' ,   'M'  ,  'F' , 
    'P'  ,  'S'   , 'T'  ,  'W'  ,  'Y'  ,  'V' , 'X'
	};

for(int i=0;i<N;i++)
{
	ch=Seq[i];
	k=0;
	while(ch!=model[k]) k++;
	index=k;	
    PWMcodepos[i]=PWMpos[index][i];
   PWMcodeneg[i]=PWMneg[index][i];
}

for(int j=0;j<M;j++)
{if(j<M/2) {PWMcode[j]=PWMcodepos[j];}

else
{PWMcode[j]=PWMcodeneg[j];}




}




}     